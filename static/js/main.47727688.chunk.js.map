{"version":3,"sources":["hooks/fetch_hook.js","utils/index.js","components/infobox/index.js","components/autosuggest/index.js","App.js","index.js"],"names":["apiUrl","getMatches","response","searchString","filter","x","search","RegExp","getHighlightParts","word","regex","str","replace","escapeRegExp","split","map","strPart","i","test","InfoBox","React","memo","title","content","className","SearchBox","props","useState","setSearchString","fetchData","setFetchData","dataSet","setDataSet","matches","setMatches","selectedItem","setSelectedItem","selectedItemIndex","setSelectedItemIndex","run","setResponse","loading","setLoading","useEffect","a","fetch","res","text","resText","json","console","log","useFetch","length","matchCount","handleKeyEvent","e","keyCode","which","c","preventDefault","selectedIndex","window","addEventListener","removeEventListener","useKeyNavigation","type","name","value","autoComplete","placeholder","onChange","target","matchItem","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47727688.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nconst apiUrl = 'https://gist.githubusercontent.com/abhijit-paul-blippar/0f97bb6626cfa9d8989c7199f7c66c5b/raw/dcff66021fba04ee8d3c6b23a3247fb5d56ae3e5/words';\n\nexport const useFetch = (run) => {\n    const [ response, setResponse ] = useState({});\n    const [ loading, setLoading ] = useState(true);\n\n    useEffect(() => {\n        // if 'run' bool is true, then fetchData\n        if (run) {\n        const fetchData = async () => {\n            setLoading(true); // loading\n            try {\n            const res = await fetch(apiUrl);\n            const resText = await res.text(); // get response as string\n            const json = resText.split('\\n'); // convert string to arr \n            setResponse(json); // set response as json\n            setLoading(false); // loading complete\n            } catch(err) {\n            console.log('%cAn Error has occured');\n            console.log(err);\n            }\n        };\n        fetchData();\n        }\n    }, [run, apiUrl]);\n\n    return { response, loading }\n}","import { useEffect } from 'react';\n\n// KeyEvent Handler Effect\nexport const useKeyNavigation = (matches, selectedItemIndex, setSelectedItemIndex, setSelectedItem) => {\n    useEffect(() => {\n      if (matches && matches.length > 0) {\n        let matchCount = matches.length;\n        \n        const handleKeyEvent = (e) => {\n          // 38: Up Arrow Key \n          if (e.keyCode === 38 || e.which === 38) {\n            if (selectedItemIndex > 1 && selectedItemIndex <= matchCount) {\n              setSelectedItemIndex(selectedItemIndex);\n              setSelectedItem(matches[selectedItemIndex - 2]);\n              setSelectedItemIndex(c => c - 1);\n            } else {\n              setSelectedItemIndex(matchCount);\n              setSelectedItem(matches[matchCount-1]);\n            }\n          }\n          // 40: DownArrow KEY\n          if (e.keyCode === 40 || e.which === 40) {\n            if (selectedItemIndex < matchCount) {\n              setSelectedItemIndex(selectedItemIndex);\n              setSelectedItem(matches[selectedItemIndex]);\n            } else {\n              setSelectedItemIndex(0);\n              setSelectedItem(matches[0]);\n            }\n            setSelectedItemIndex(c => c+1);\n          }\n          // ENTER KEY\n          if (e.keyCode === 13 || e.which === 13) {\n            e.preventDefault();\n            // pending selectedItemIndex update from arrows causes it to add 1 extra when Enter is pressed.\n            // The following is required to allow it to select the correctly highlighted option.\n            let selectedIndex = selectedItemIndex - 1;\n            if (selectedIndex === -1) selectedIndex = 0;\n            setSelectedItem(matches[selectedIndex]);\n          }\n        };\n        \n        window.addEventListener(\"keydown\", handleKeyEvent);\n        return () => window.removeEventListener(\"keydown\", handleKeyEvent);\n      }\n    }, [\n      matches, selectedItemIndex, setSelectedItemIndex, setSelectedItem\n    ]);\n  }\n\n// find matches inside response using searchString\n// Used by SearchBox component\nexport const getMatches = (response, searchString) => {\n    return response.filter(\n      (x) =>\n        x.search(new RegExp(searchString, \"i\")) > -1\n    );\n}\n\n// find searchstring and highlight selected part\nexport const getHighlightParts = (searchString, word) => {\n    const escapeRegExp = (str = \"\") =>\n    str.replace(/([.?*+^$[\\]\\\\(){}|-])/g, \"\\\\$1\");\n    const regex = new RegExp(`(${escapeRegExp(searchString)})`, \"gi\");\n    const strParts = word.split(regex);\n    return strParts.map((strPart, i) =>\n      regex.test(strPart) ? (\n        <mark key={i}>{strPart}</mark>\n      ) : (\n        <span key={i}>{strPart}</span>\n    ));\n}","import React from 'react';\nimport './infobox.css';\n\nconst InfoBox = React.memo(({ title, content }) => \n  <div className=\"infobox\">\n    <div className=\"title\">{title}</div>\n    <div className=\"content\">{content}</div>\n  </div>\n);\nexport default InfoBox;","import React, { useState, useEffect } from 'react';\nimport { useFetch } from '../../hooks';\nimport { useKeyNavigation, getMatches, getHighlightParts } from '../../utils';\nimport InfoBox from '../infobox';\nimport './autosuggest.css';\n\nconst SearchBox = (props) => {\n    const textInputCount = 3;\n    const [searchString, setSearchString] = useState('');\n    const [fetchData, setFetchData] = useState(false); // bool: true = fetchData using useFetch()\n    const [dataSet, setDataSet] = useState([]); // load response into state\n    const [matches, setMatches] = useState([]); // load matches into state\n    const [selectedItem, setSelectedItem] = useState('');\n    const [selectedItemIndex, setSelectedItemIndex] = useState(0);\n    const { response, loading } = useFetch(fetchData);\n    \n    // onChange for input field\n    const handleChange = (e) => {\n      setSearchString(e.target.value);\n      if (e.target.value.length >= textInputCount) {\n        setFetchData(true);\n      }\n      else {\n        setSelectedItemIndex(0); // reset to preserve keyboard navigation\n        setMatches([]); // reset 'matches' array\n        console.log('matches array reset')\n      }\n    }\n    \n    // Load dataSet from fetch\n    useEffect(() => {\n      if (!loading) {\n        setDataSet(response);\n        console.log('Data loaded successfully');\n      }\n    }, [loading, response, setDataSet]);\n    \n    // Load \"matches\" array\n    useEffect(() => {\n      if (dataSet && searchString.length >= textInputCount) {\n        setMatches(getMatches(dataSet, searchString));\n        console.log('Matches updated')\n      }\n    }, [dataSet, searchString, setMatches, getMatches]);\n    \n    useKeyNavigation(matches, selectedItemIndex, setSelectedItemIndex, setSelectedItem);\n    \n    // Display \"matches\" array\n    const displayMatches = () => {\n      // double check matches is valid for map()\n      return (matches && matches.length > 0 ?\n      matches.map((matchItem, i) => (\n        <li key={i} className={selectedItemIndex-1 === i ? 'highlight':''} onClick={() => {\n            setSelectedItem(matchItem);\n            setSelectedItemIndex(i);\n        }}>\n          {getHighlightParts(searchString, matchItem)}\n        </li>\n      )) : ''); \n    }\n      \n    \n    return (\n      <div className=\"autosuggest-container\">\n        <input type=\"text\"  name={props.name}  value={searchString} className=\"txt-search\"\n          autoComplete=\"off\" placeholder=\"Type text\" onChange={handleChange} />\n        \n        { !loading &&\n        <ul className=\"search-results\">\n          {displayMatches()}\n        </ul>\n        }\n        <div className=\"infobox-container\">\n            <InfoBox title=\"searchString\" content={searchString} />\n            { selectedItem.length > 0 &&\n            <InfoBox title=\"selectedItem\" content={selectedItem} /> }\n            <InfoBox title=\"dataSet\" content={ dataSet.length > 0 ? `Total records: ${dataSet.length}` : 'not loaded' } />\n            <InfoBox title=\"matches\" content={ matches.length > 0 ? `Total matched: ${matches.length}` : 'no matches' } />\n        </div>\n      </div>\n    )\n};\n\nexport default SearchBox;","import SearchBox from './components/autosuggest';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Welcome to autosuggest highlight app</h2>\n      <SearchBox />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}